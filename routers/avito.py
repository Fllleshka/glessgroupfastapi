# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ FastAPI
from fastapi import APIRouter
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
import requests
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å json
import json
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
import datetime

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ê–≤–∏—Ç–æ
from dates import datesforavito
# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
from functions.logger import send_message_telegram_bot
# –û–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AvitoAPI
avito = APIRouter()

# –†—É—á–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
# –ë–µ–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@avito.get("/getaccesstoken", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ TOKEN –¥–ª—è —Ä–∞–±–æ—Ç—ã")
def get_access_token():
    try:
        autourl = "https://api.avito.ru/token/"
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
        Params = {
            "grant_type": "client_credentials",
            "client_id": datesforavito.autorization_id,
            "client_secret": datesforavito.autorization_secret
        }
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        Headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞.
        # –°–µ—Å—Å–∏—è
        Response = requests.Session().post(autourl, headers=Headers, params=Params)
        jsonresp = dict(json.loads(Response.text))
        result = jsonresp["token_type"] + " " + jsonresp['access_token']
        return {
            "result": f"–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω",
            "data": result}
    except Exception as e:
        return {
            "result": f"–°–±–æ–π –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "data": e}

# –†—É—á–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
# –ë–µ–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@avito.get("/getcurrentbalance", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ")
def get_current_balance():
    try:
        url = "https://api.avito.ru/cpa/v3/balanceInfo"
        Headers = dict()
        Headers["Authorization"] = get_access_token()["data"]
        Headers["X-Source"] = "BotGless2"
        Headers["Content-Type"] = "application/json"
        response = requests.Session().post(url, headers=Headers, json={})
        balance = response.json().get('balance') // 100
        return {
            "result": f"–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω",
            "data": balance}
    except Exception as e:
        return {
            "result": f"–°–±–æ–π –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "data": e}

# –†—É—á–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –¥–µ–Ω—å
# –ë–µ–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@avito.get("/calcavaragedaily", summary="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –¥–µ–Ω—å")
def calc_avarage_daily():
    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∑–∞ –∏—é–Ω—å 2025
        spent_money = 44200
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        count_days = 30
        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –¥–µ–Ω—å
        average_spent = spent_money // count_days
        return {
            "result": f"–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –¥–µ–Ω—å",
            "data": average_spent}
    except Exception as e:
        return {
            "result": f"–°–±–æ–π –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –¥–µ–Ω—å",
            "data": e}

# –†—É—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
# –ë–µ–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@avito.get("/decisionmaking", summary="–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
def decision_making():
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        balance = get_current_balance()
        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
        avmoney = calc_avarage_daily()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        countdays = int(int(balance['data']) // avmoney['data'])
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        textmessage = "–ë–∞–ª–∞–Ω—Å –ê–≤–∏—Ç–æ: " + str(balance) + " ‚ÇΩ\n"
        textmessage += "–ë–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∑–≤–∞—Ç–∏—Ç –Ω–∞ " + str(countdays) + " –¥–Ω–µ–π.\n\n"
        # –ö–ª–∞—Å—Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        classnotification = send_message_telegram_bot()
        # –í—Ä–µ–º—è —Å–µ–π—á–∞—Å
        today = datetime.datetime.today().strftime("%H:%M:%S")
        # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –º–µ–Ω—å—à–µ —á–µ–º 3 –¥–Ω—è, –æ–ø–æ–≤–µ—â–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        if countdays <= 3:
            # –¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            textmessage += "üî¥–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.üî¥"
            classnotification.notificationavito(balance, countdays, textmessage)
            return {
                "result": f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ",
                "data": True}
        # –ò–Ω–∞—á–µ –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        else:
            # –¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            textmessage += "üü¢–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å.üü¢"
            classnotification.notificationavito(balance, countdays, textmessage)
            return {
                "result": f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
                "data": False}
    except Exception as e:
        return {
            "result": f"–°–±–æ–π –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –¥–µ–Ω—å",
            "data": e}